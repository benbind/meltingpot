diff --git a/examples/pettingzoo/cleanrl_train.py b/examples/pettingzoo/cleanrl_train.py
index 0534ef1..b8a60a3 100644
--- a/examples/pettingzoo/cleanrl_train.py
+++ b/examples/pettingzoo/cleanrl_train.py
@@ -30,7 +30,7 @@ def parse_args():
         help="if toggled, `torch.backends.cudnn.deterministic=False`")
     parser.add_argument("--cuda", type=lambda x: bool(strtobool(x)), default=True, nargs="?", const=True,
         help="if toggled, cuda will be enabled by default")
-    parser.add_argument("--track", type=lambda x: bool(strtobool(x)), default=False, nargs="?", const=True,
+    parser.add_argument("--track", type=lambda x: bool(strtobool(x)), default=True, nargs="?", const=True,
         help="if toggled, this experiment will be tracked with Weights and Biases")
     parser.add_argument("--wandb-project-name", type=str, default="ppo",
         help="the wandb's project name")
@@ -42,13 +42,13 @@ def parse_args():
     # Algorithm specific arguments
     parser.add_argument("--env-id", type=str, default="harvest_open",
         help="the id of the environment")
-    parser.add_argument("--total-timesteps", type=int, default=1000,
+    parser.add_argument("--total-timesteps", type=int, default=20000,
         help="total timesteps of the experiments")
     parser.add_argument("--learning-rate", type=float, default=1e-4,
         help="the learning rate of the optimizer")
     parser.add_argument("--num-envs", type=int, default=1,
         help="the number of parallel game environments")
-    parser.add_argument("--num-steps", type=int, default=128,
+    parser.add_argument("--num-steps", type=int, default=1000,
         help="the number of steps to run in each environment per policy rollout")
     parser.add_argument("--anneal-lr", type=lambda x: bool(strtobool(x)), default=True, nargs="?", const=True,
         help="Toggle learning rate annealing for policy and value networks")
@@ -180,7 +180,7 @@ if __name__ == "__main__":
 
     env_name = "commons_harvest__open"
     env_config = substrate.get_config(env_name)
-    num_cpus = 1  # number of cpus
+    num_cpus = 0  # number of cpus
     num_frames = 4
     model_path = None  # Replace this with a saved model
 
@@ -206,14 +206,18 @@ if __name__ == "__main__":
         env,
         num_vec_envs=args.num_envs,
         num_cpus=num_cpus,
-        base_class="gymnasium")
+        base_class="stable_baselines3")
+    """
+    gymnasium or sb3 base class? Main difference in reset() method:
+    # Note: SB3's vector envs return only observations on reset, and store infos in `self.reset_infos`
+    """
 
     envs.single_observation_space = envs.observation_space
     envs.single_action_space = envs.action_space
     envs.is_vector_env = True
 
-    envs = gym.wrappers.RecordEpisodeStatistics(envs)
-    envs = gym.wrappers.RecordVideo(envs, f"videos/{run_name}")
+    #envs = gym.wrappers.RecordEpisodeStatistics(envs)
+    #envs = gym.wrappers.RecordVideo(envs, f"videos/{run_name}")
 
     """
     single environment observations have dimensions 88x88x(12+7)
@@ -234,18 +238,18 @@ if __name__ == "__main__":
     optimizer = optim.Adam(agent.parameters(), lr=args.learning_rate, eps=1e-5)
 
     # ALGO Logic: Storage setup
-    obs = torch.zeros((args.num_steps*num_agents, args.num_envs) + envs.single_observation_space.shape).to(device)
+    obs = torch.zeros((args.num_steps, args.num_envs*num_agents) + envs.single_observation_space.shape).to(device)
     """
     we set the first dimension of obs to be the number of steps
     we will then add observations to this by calling obs[step] = next_obvs
     note each observation is thus 7x88x88x19 - whilst `obs` is 128x7x88x88x19
     with that first dimension for storing all the steps (in each env) per policy rollout
     """
-    actions = torch.zeros((args.num_steps, args.num_envs) + envs.single_action_space.shape).to(device)
-    logprobs = torch.zeros((args.num_steps, args.num_envs)).to(device)
-    rewards = torch.zeros((args.num_steps, args.num_envs)).to(device)
-    dones = torch.zeros((args.num_steps, args.num_envs)).to(device)
-    values = torch.zeros((args.num_steps, args.num_envs)).to(device)
+    actions = torch.zeros((args.num_steps, args.num_envs*num_agents) + envs.single_action_space.shape).to(device)
+    logprobs = torch.zeros((args.num_steps, args.num_envs*num_agents)).to(device)
+    rewards = torch.zeros((args.num_steps, args.num_envs*num_agents)).to(device)
+    dones = torch.zeros((args.num_steps, args.num_envs*num_agents)).to(device)
+    values = torch.zeros((args.num_steps, args.num_envs*num_agents)).to(device)
 
     # TRY NOT TO MODIFY: start the game
     global_step = 0
@@ -254,7 +258,7 @@ if __name__ == "__main__":
     seems that envs.reset() now returns a tuble with what we want first,
     and then a list flattened_infos second. So I'm calling envs.reset()[0]
     """
-    next_obs = torch.Tensor(envs.reset()[0]).to(device)
+    next_obs = torch.Tensor(envs.reset()).to(device)
 
 
     next_done = torch.zeros(args.num_envs*num_agents).to(device)
@@ -285,7 +289,7 @@ if __name__ == "__main__":
             next_obs, next_done = torch.Tensor(next_obs).to(device), torch.Tensor(done).to(device)
 
             for idx, item in enumerate(info):
-                player_idx = idx % 2
+                player_idx = idx % 7
                 if "episode" in item.keys():
                     print(f"global_step={global_step}, {player_idx}-episodic_return={item['episode']['r']}")
                     writer.add_scalar(f"charts/episodic_return-player{player_idx}", item["episode"]["r"], global_step)
